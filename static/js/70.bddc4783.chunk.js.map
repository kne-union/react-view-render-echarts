{"version":3,"sources":["../../src/Logic/LoadMore/index.js"],"names":["applyVariable","spin","className","props","useState","currentPage","useRef","data","distanceRef","distance","loadingRef","hasNextRef","load","useCallback","setLoading","Promise","resource","hasNext","setData","old","newData","console","e","setError","scrollHandler","useEffect","status","title","subTitle","error","classnames","onScroll","variable","$item","loading"],"mappings":"4XA4DA,EAAeA,aAtDE,SAAC,SAAmE,EAAnE,WAAmE,EAAnE,WAAmE,EAA9CC,YAArB,aAAmE,EAAnE,SAA0CC,EAAyB,EAAzBA,UAAcC,EAAW,iBACjF,EAA8BC,oBAA9B,sBAAM,EAAN,KAAM,EAAN,KACA,EAA0BA,oBAA1B,sBAAM,EAAN,KAAM,EAAN,KACA,EAAwBA,mBAAxB,uBAAM,EAAN,KAAM,EAAN,KACMC,EAAcC,iBAApB,GACAD,UAAsBE,SAAtBF,EACA,IAAMG,EAAcF,iBAAOG,GAA3B,IACMC,EAAaJ,iBAAnB,GACAI,YACA,IAAMC,EAAaL,kBAAnB,GACMM,EAAOC,uBAAY,WACjBH,EAAJ,UAGAI,MACAC,gBAAoC,oBAAbC,EAA0BA,EAASX,EAA1C,SAAhBU,YAA6FR,YACzF,GAAIA,GAAQA,iBAARA,SAAuCA,iBAA3C,WAA2E,CACvE,IAAM,EAAN,EAAM,KAAOU,EAAb,EAAaA,QACbN,YACAO,GAASC,YACL,IAAMC,EAAUD,QAAhB,GAEA,OADAC,UACA,UAGJC,iGAEJC,YACAD,iBACAE,EAASD,EAATC,YAdJR,SAeW,WACPD,YAEL,CAvBH,IAyBMU,EAAgBX,uBAAaS,YAC3BA,sBAAwBA,SAAxBA,UAA6CA,SAA7CA,aAAqEd,EAArEc,SAA4FX,EAAhG,SACIC,MAEL,CAJH,IASA,OAHAa,qBAAU,WACNb,MACD,CAFHa,IAGA,EACW,uBAAQC,OAAR,QAAuBC,MAAvB,2BAAoCC,SAAUC,IAGlD,0CAAgB3B,UAAW4B,IAAW5B,EAAtC,yBAA2E6B,SAAUP,IACxF,uBAASQ,SAAU,CAACC,MAAO1B,IADxB,GAEF2B,EAAU,sBAAH,GAFZ","file":"static/js/70.bddc4783.chunk.js","sourcesContent":["import React, {useState, useEffect, useCallback, useRef} from 'react';\nimport Context from '../Context';\nimport {Spin, Result} from 'antd';\nimport {applyVariable} from '../../util';\nimport classnames from 'classnames';\n\nconst LoadMore = ({resource, distance, spin = {}, children, className, ...props}) => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n    const [data, setData] = useState([]);\n    const currentPage = useRef(0);\n    currentPage.current = data.length + 1;\n    const distanceRef = useRef(distance || 20);\n    const loadingRef = useRef(loading);\n    loadingRef.current = loading;\n    const hasNextRef = useRef(true);\n    const load = useCallback(() => {\n        if (loadingRef.current) {\n            return;\n        }\n        setLoading(true);\n        Promise.resolve(typeof resource === 'function' ? resource(currentPage.current) : null).then((data) => {\n            if (data && data.hasOwnProperty('list') && data.hasOwnProperty('hasNext')) {\n                const {list, hasNext} = data;\n                hasNextRef.current = hasNext;\n                setData((old) => {\n                    const newData = old.slice(0);\n                    newData.push(list);\n                    return newData;\n                });\n            } else {\n                console.warn('返回数据必须包含list和hasNext属性');\n            }\n        }, (e) => {\n            console.error(e);\n            setError(e.message);\n        }).finally(() => {\n            setLoading(false);\n        });\n    }, [resource]);\n\n    const scrollHandler = useCallback((e) => {\n        if (e.target.scrollHeight - e.target.scrollTop - e.target.clientHeight < distanceRef.current && hasNextRef.current) {\n            load();\n        }\n    }, [load]);\n\n    useEffect(() => {\n        load();\n    }, [load]);\n    if (error) {\n        return <Result status=\"error\" title=\"加载异常\" subTitle={error}/>;\n    }\n\n    return <div {...props} className={classnames(className, 'view-render-load-more')} onScroll={scrollHandler}>\n        <Context variable={{$item: data}}>{children}</Context>\n        {loading ? <Spin {...spin}/> : null}\n    </div>;\n};\n\nexport default applyVariable(LoadMore);"],"sourceRoot":""}